# -*- coding: utf-8 -*-
"""slot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17qk0binZKUmu8uMzk7DqhHk90Vog6U5c
"""

def deposit():
    while True:
        amount = input("Hello! How many dollars would you like to bet on? $ ")
        if amount.isdigit():
            amount = int(amount)
            if amount > 0:
                break
            else:
                print("Amount must be greater than 0.")
        else: 
                print("Please enter a number.")
                
    return amount





def get_number_of_lines():
    MAX_LINES = 5
    while True:
        lines = input("Hello! How many lines would you like to bet on (1-" + str(MAX_LINES) + ")? ")
        if lines.isdigit():
            lines = int(lines)
            if 1 <= lines <= MAX_LINES:
                break
            else:
                print("Enter valid number of lines.")
        else: 
            print("Please enter a number.")
                
    return lines

def get_bet():
    MAX_BET = 100
    MIN_BET = 1 
    while True:
        bet = input("What would you like to bet on each line? $ ")
        if bet.isdigit():
            bet = int(bet)
            if MIN_BET <= bet <= MAX_BET:
                break
            else:
                print(f"Amount must be between ${MIN_BET} and ${MAX_BET}")
        else: 
                print("Please enter a number.")
                
    return bet

def total_bet(balance, bet, lines):
    total_Bet = bet * lines
    while True:
        if total_Bet <= balance:
            print(f"You are betting ${bet} on {lines} lines. Total bet is equal to ${total_Bet}")
            break
        else:
            print(f"You do not have enough balance, your current balance is {balance}")
            bet = get_bet()
            total_Bet = bet * lines
    return total_Bet

symbol_Count_For_SlotMachine = {
    "A":2,
    "B":3,
    "C":4,
    "D":5
}

import random

def get_slot_machine_spin(symbols, rows = 3, cols = 3):
  symbols_List = []
  for keys, values in symbol_Count_For_SlotMachine.items():
    for _ in range(values):
      symbols_List.append(keys)

    columns = []
    for _ in range(cols):
      column = []
      symbol_Count = symbols_List[:]
      for _ in range(rows):
        if not symbol_Count:
          # if symbols_List is empty, refill symbol_Count
          symbol_Count = symbols_List[:]
        value = random.choice(symbol_Count)
        symbol_Count.remove(value)
        column.append(value)

      columns.append(column)

  return columns

def print_slot_machine(columns):
  for row in range(len(columns[0])):
    for i, column in enumerate(columns):
      if i != len(columns) - 1:
        print(column[row], "|", end=" ")
      else:
        print(column[row])

def check_winnings(columns, lines, bet, values):
    winnings = 0
    winning_lines = []
    for line in range(lines):
        symbol = columns[0][line]
        for column in columns:
            symbol_to_check = column[line]
            if symbol != symbol_to_check:
                break
        else:
            winnings += values[symbol] * bet
            winning_lines.append(line + 1)

    return winnings, winning_lines

def game(balance):
  lines = get_number_of_lines()
  bet = get_bet()
  total_Bet = total_bet(balance, bet, lines)
  slots = get_slot_machine_spin(symbol_Count_For_SlotMachine)
  print_slot_machine(slots)
  winnings, winning_lines = check_winnings(slots, lines, bet, symbol_Count_For_SlotMachine)
  print(f"You won ${winnings}")
  if winnings > 0:
    print(f"You won on lines:", *winning_lines)
  else:
    print("Sorry, you haven't won anything")
  return winnings - total_Bet

def main():
    balance = deposit()
    while True:
      print(f"Current balance is {balance}")
      answer = input("Press enter to spin and q to quit")
      if answer == 'q':
        print(f"Thanks for playing,  your are left with {balance}")
        return
      balance += game(balance)

    print(f"You are left with {balance}")

main()

